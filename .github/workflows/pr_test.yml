name: Pull Request Checks

permissions:
  contents: read
  pull-requests: write
  checks: write

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check PR description
        id: pr-check
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const body = pullRequest.body;
            
            // Check if the checkboxes are ticked
            const apiChangesChecked = body.includes('- [x] This PR includes API changes.');
            const screenshotChecked = body.includes('- [x] Screenshots are attached.');
            
            // Check for the presence of screenshots (assuming they are linked or embedded)
            const hasScreenshots = body.includes('![') || body.includes('http');
            
            let failureReason = '';
            
            if (screenshotChecked && !hasScreenshots) {
              failureReason = 'Screenshots are marked as attached, but none were found in the PR description.';
            } else if (apiChangesChecked && !screenshotChecked) {
              failureReason = 'API changes are marked, but screenshots are not attached. Screenshots are mandatory for API changes.';
            } else if (apiChangesChecked && screenshotChecked && !hasScreenshots) {
              failureReason = 'API changes and screenshots are marked, but no screenshots were found in the PR description.';
            }
            
            if (failureReason) {
              core.setFailed(failureReason);
              core.setOutput('error-message', failureReason);
            } else {
              console.log('All checks passed successfully!');
              core.setOutput('error-message', '');
            }

      - name: PR Check Result
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            
            let errorMessage = '${{ steps.pr-check.outputs.error-message }}';
            if (!errorMessage) {
              // If error message is not set, try to get it from the job output
              try {
                const jobOutput = fs.readFileSync(process.env.GITHUB_OUTPUT, 'utf8');
                const errorLine = jobOutput.split('\n').find(line => line.startsWith('error-message='));
                if (errorLine) {
                  errorMessage = errorLine.split('=')[1];
                }
              } catch (error) {
                console.error('Failed to read job output:', error.message);
              }
            }
            
            // If we still don't have an error message, use a default one
            if (!errorMessage) {
              errorMessage = 'An unknown error occurred during PR checks. Please review the workflow logs for more details.';
            }
            
            const checkConclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const checkOutput = checkConclusion === 'success' 
              ? { title: 'PR Checks Passed', summary: 'All PR checks have passed successfully.' }
              : { title: 'PR Checks Failed', summary: errorMessage };
            
            try {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'PR Checks',
                head_sha: context.sha,
                status: 'completed',
                conclusion: checkConclusion,
                output: checkOutput
              });
            } catch (error) {
              console.error('Failed to create check:', error.message);
            }